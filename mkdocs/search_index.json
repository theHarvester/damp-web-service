{
    "docs": [
        {
            "location": "/", 
            "text": "L-Api\n\n\nA specification for a well rounded web service.\n\n\nOverview\n\n\nAn l-api compliant web service provides a few key features that address the downsides of other alternatives such as REST, RPC and SOAP.\n\n\n\n\ndocumentation built in\n\n\nentities separate from actions\n\n\na deep and flexible way of getting only the data we need\n\n\nminimal cruft\n\n\n\n\nThe structure of an l-api web service is made up of two distinct parts, entities and actions.\n\n\n\n\n\n\n\n\nRoute\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n/entities\n\n\nGET\n\n\nList the various entities available in the system\n\n\n\n\n\n\n/entities/{type}\n\n\nGET\n\n\nDescribe the entity in detail. This will include field names, related entities and other info.\n\n\n\n\n\n\n/entities/{type}\n\n\nPUT\n\n\nCreates a new entity\n\n\n\n\n\n\n/entities/{type}\n\n\nPOST\n\n\nQueries the data starting at the entity type\n\n\n\n\n\n\n/id/{id}\n\n\nGET\n\n\nThis is the same as calling GET /entities/{type}\n\n\n\n\n\n\n/id/{id}\n\n\nPOST\n\n\nQuery the required fields and related entities\n\n\n\n\n\n\n/id/{id}\n\n\nPATCH\n\n\nPatch the data. If a field is not supplied it will not get updated\n\n\n\n\n\n\n/id/{id}\n\n\nUPDATE\n\n\nUpdate the data. The entity will be updated to the data passed in\n\n\n\n\n\n\n/id/{id}\n\n\nDELETE\n\n\nDeletes the entity\n\n\n\n\n\n\n/actions/\n\n\nGET\n\n\nLists the services available\n\n\n\n\n\n\n/actions/{type}\n\n\nGET\n\n\nGets the details of the actions available for the type\n\n\n\n\n\n\n/actions/{type}/{action}\n\n\nPOST\n\n\nPerforms the action\n\n\n\n\n\n\n\n\nEntities\n\n\nEntities are best compared to the RESTful web services you're used to. They should be thought of as models or data objects at the orm level. An entity always has an Id that is unique to the system and it can always describe itself.\n\n\nIds\n\n\nThe id of an entity must be unique across the system. In the following examples the convention {service_name}-{id} is used but this is just a suggestion\n\n\nSelf-description\n\n\nAt the very heart of entities is the ability to describe itself.\n\n\nGET /entities/contacts\n\n\n\n\n{\n  \nTODO\n: \nStructure not complete\n,\n  \nfields\n: {\n    \nname\n: { \ntype\n:\nstring\n },\n    \nemail\n: { \ntype\n:\nstring\n },\n    \nphone\n: { \ntype\n:\nstring\n },\n    \nnext_of_kin\n: {\n      \ntype\n: \nentity\n,\n      \nname\n: \ncontacts\n\n    }\n  }\n}\n\n\n\n\nNow let's look at this request which will put the last request to use\n\n\nPOST /id/contact-12345\n{\n  \n_fields_\n:[\nname\n, \nemail\n, \nnext_of_kin\n],\n  \nnext_of_kin\n:{\n    \n_fields_\n:[\nname\n, \nphone\n]\n  }\n}\n\n\n\n\n{\n  \nid\n:\ncontact-12345\n,\n  \nname\n:\nJohn Smith\n,\n  \nemail\n:\njohn.smith@example.com\n,\n  \nnext_of_kin\n:{\n    \nid\n:\ncontact-9876\n,\n    \nname\n:\nJane Smith\n,\n    \nemail\n:\njane.smith@example.com\n\n  }\n}", 
            "title": "Home"
        }, 
        {
            "location": "/#l-api", 
            "text": "A specification for a well rounded web service.", 
            "title": "L-Api"
        }, 
        {
            "location": "/#overview", 
            "text": "An l-api compliant web service provides a few key features that address the downsides of other alternatives such as REST, RPC and SOAP.   documentation built in  entities separate from actions  a deep and flexible way of getting only the data we need  minimal cruft   The structure of an l-api web service is made up of two distinct parts, entities and actions.     Route  Method  Description      /entities  GET  List the various entities available in the system    /entities/{type}  GET  Describe the entity in detail. This will include field names, related entities and other info.    /entities/{type}  PUT  Creates a new entity    /entities/{type}  POST  Queries the data starting at the entity type    /id/{id}  GET  This is the same as calling GET /entities/{type}    /id/{id}  POST  Query the required fields and related entities    /id/{id}  PATCH  Patch the data. If a field is not supplied it will not get updated    /id/{id}  UPDATE  Update the data. The entity will be updated to the data passed in    /id/{id}  DELETE  Deletes the entity    /actions/  GET  Lists the services available    /actions/{type}  GET  Gets the details of the actions available for the type    /actions/{type}/{action}  POST  Performs the action", 
            "title": "Overview"
        }, 
        {
            "location": "/#entities", 
            "text": "Entities are best compared to the RESTful web services you're used to. They should be thought of as models or data objects at the orm level. An entity always has an Id that is unique to the system and it can always describe itself.  Ids  The id of an entity must be unique across the system. In the following examples the convention {service_name}-{id} is used but this is just a suggestion  Self-description  At the very heart of entities is the ability to describe itself.  GET /entities/contacts  {\n   TODO :  Structure not complete ,\n   fields : {\n     name : {  type : string  },\n     email : {  type : string  },\n     phone : {  type : string  },\n     next_of_kin : {\n       type :  entity ,\n       name :  contacts \n    }\n  }\n}  Now let's look at this request which will put the last request to use  POST /id/contact-12345\n{\n   _fields_ :[ name ,  email ,  next_of_kin ],\n   next_of_kin :{\n     _fields_ :[ name ,  phone ]\n  }\n}  {\n   id : contact-12345 ,\n   name : John Smith ,\n   email : john.smith@example.com ,\n   next_of_kin :{\n     id : contact-9876 ,\n     name : Jane Smith ,\n     email : jane.smith@example.com \n  }\n}", 
            "title": "Entities"
        }
    ]
}